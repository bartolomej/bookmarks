{"version":3,"sources":["Card.jsx","search.js","App.jsx","serviceWorker.js","index.js"],"names":["url","title","image","description","searchPattern","Container","onMouseEnter","e","console","log","target","href","Image","src","alt","onerror","Title","highlightText","Description","text","pattern","undefined","substring","match","RegExp","matchIndex","index","length","styled","h3","p","img","a","tree","metadata","nextTree","clonedTree","JSON","parse","stringify","section","links","getMatchedLinks","push","subsections","nextSection","sub","j","data","test","slice","get","fetch","response","json","apiUrl","file","SearchInput","input","LoadingContainer","div","Header","Body","LinksContainer","Section","Subsection","SectionTitle","h2","SubsectionTitle","Boolean","window","location","hostname","ReactDOM","render","useState","loading","setLoading","treeData","setTreeData","metaData","setMetaData","setSearchPattern","matchedTreeData","setMatchedTreeData","useEffect","treeDataResponse","metaDataResponse","fetchData","then","r","onChange","value","search","type","placeholder","map","renderLink","s","link","Card","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2becbe22.chunk.js","sourcesContent":["import React from 'react';\nimport styled from \"styled-components\";\n\n\nexport default function ({ url, title, image, description, searchPattern }) {\n  const defaultImage = 'website-logo.svg';\n  function onHover (e) {\n    console.log(title, description);\n  }\n  return (\n    <Container onMouseEnter={onHover} target=\"_blank\" href={url}>\n      <Image\n        src={image ? image : defaultImage}\n        alt={title}\n        onerror={`if (this.src != '${defaultImage}') this.src = '${defaultImage}';`}\n      />\n      <Title>{highlightText(title, searchPattern)}</Title>\n      <Description>{highlightText(description, searchPattern)}</Description>\n    </Container>\n  )\n}\n\nfunction highlightText (text, pattern) {\n  if (text === undefined) return text;\n  if (pattern === '') return text.substring(0, 80) + '...';\n  let match = text.match(new RegExp(pattern, 'i'));\n  if (match === null) return text.substring(0, 80) + '...';\n  let matchIndex = match.index;\n  return (\n    <div>\n      <span>{text.substring(0, matchIndex)}</span>\n      <mark>{text.substring(matchIndex, matchIndex + pattern.length)}</mark>\n      <span>{text.substring(matchIndex + pattern.length, text.length)}</span>\n    </div>\n  )\n}\n\nconst Title = styled.h3`\n  font-size: 14px;\n`;\n\nconst Description = styled.p`\n  font-size: 11px;\n`;\n\nconst Image = styled.img`\n  width: 150px;\n  font-size: 10px;\n`;\n\nconst Container = styled.a`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-decoration: none;\n  width: 200px;\n  padding: 10px;\n  margin: 5px;\n  color: black;\n`;\n","/**\n * @description\n * Outputs new tree state based on searchPattern.\n * @param tree {Object}\n * @param metadata {Object}\n * @param searchPattern {string}\n */\nexport default function (tree, metadata, searchPattern) {\n  let nextTree = [];\n  let clonedTree = JSON.parse(JSON.stringify(tree));\n  for (let section of clonedTree) {\n    if (section.links) {\n      let links = getMatchedLinks(section);\n      if (links.length > 0) {\n        nextTree.push({ ...section, links })\n      }\n    }\n    if (section.subsections) {\n      let nextSection = { ...section, subsections: [] };\n      for (let sub of section.subsections) {\n        let links = getMatchedLinks(sub);\n        if (links.length > 0) {\n          nextSection.subsections.push({ ...sub, links })\n        }\n      }\n      if (nextSection.subsections.length > 0) {\n        nextTree.push(nextSection);\n      }\n    }\n  }\n  function getMatchedLinks (section) {\n    let links = [];\n    for (let j = 0; j < section.links.length; j++) {\n      let data = metadata[section.links[j]];\n      if (data === undefined) {\n        console.log(`${section.links[j]} is undefined`);\n        continue;\n      }\n      if (\n        new RegExp(searchPattern, 'i').test(data.title) ||\n        new RegExp(searchPattern, 'i').test(data.description)\n      ) {\n        links.push(...section.links.slice(j, j + 1))\n      }\n    }\n    return links;\n  }\n  return nextTree;\n}","import React, { useEffect, useState } from 'react';\nimport './index.css';\nimport styled from 'styled-components';\nimport Card from \"./Card\";\nimport search from \"./search\";\n\n\nexport default function () {\n\n  const [loading, setLoading] = useState(true);\n  const [treeData, setTreeData] = useState({});\n  const [metaData, setMetaData] = useState({});\n  const [searchPattern, setSearchPattern] = useState('');\n  const [matchedTreeData, setMatchedTreeData] = useState([]);\n\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (false) {\n        setTreeData(require('./data/tree.json'));\n        setMatchedTreeData(require('./data/tree.json'));\n        setMetaData(require('./data/meta.json'));\n        return;\n      }\n      const treeDataResponse = await get(apiUrl('tree.json'));\n      const metaDataResponse = await get(apiUrl('meta.json'));\n      setTreeData(treeDataResponse);\n      setMatchedTreeData(treeDataResponse);\n      console.log(metaData)\n      setMetaData(metaDataResponse);\n    };\n    fetchData().then(r => setLoading(false));\n  }, []);\n\n  function onSearchInput (e) {\n    setLoading(true);\n    let searchPattern = e.target.value;\n    setSearchPattern(searchPattern);\n    if (searchPattern === '') {\n      setLoading(false);\n      return setMatchedTreeData(treeData);\n    }\n    let nextTree = search(treeData, metaData, searchPattern);\n    setMatchedTreeData(nextTree);\n    setLoading(false);\n  }\n\n  return (\n    <Container>\n      {loading && (\n        <LoadingContainer>\n          <h1>Loading....</h1>\n        </LoadingContainer>\n      )}\n      <SearchInput onChange={onSearchInput} type=\"text\" placeholder=\"Search ...\"/>\n      <Header>\n        <h1>Cool links ðŸ’¾ðŸ“šðŸ“–</h1>\n        <p>Links of different interesting ideas, resources, blogs, articles, books etc.</p>\n      </Header>\n      <Body>\n        {matchedTreeData.map(renderSection)}\n      </Body>\n    </Container>\n  );\n\n  function renderSection (section) {\n    if (!section.subsections) {\n      return (\n        <Section>\n          <SectionTitle>{section.title}</SectionTitle>\n          <LinksContainer>\n            {section.links.map(renderLink)}\n          </LinksContainer>\n        </Section>\n      )\n    }\n    return (\n      <Section>\n        <SectionTitle>{section.title}</SectionTitle>\n        <LinksContainer>\n          {section.subsections.map(s => {\n            return (\n              <Subsection>\n                <SubsectionTitle>{s.title}</SubsectionTitle>\n                <LinksContainer>\n                  {s.links.map(renderLink)}\n                </LinksContainer>\n              </Subsection>\n            )\n          })}\n        </LinksContainer>\n      </Section>\n    );\n  }\n\n  function renderLink (link) {\n    let data = metaData[link];\n    if (data === undefined) {\n      return console.log(`Data not found for ${link}`);\n    }\n    return (\n      <Card\n        url={link}\n        title={data.title}\n        description={data.description}\n        image={data.image}\n        searchPattern={searchPattern}\n      />\n    )\n  }\n}\n\nasync function get (url) {\n  const response = await fetch(url);\n  return await response.json();\n}\n\nfunction apiUrl (file) {\n  return `https://raw.githubusercontent.com/bartolomej/cool-links/master/data/${file}`;\n}\n\nconst SearchInput = styled.input`\n  outline: none;\n  padding: 10px;\n  border-radius: 20px;\n  border: 2px solid palevioletred;\n  font-weight: bold;\n  font-size: 12px;\n  position: fixed;\n  top: 10px;\n  right: 10px;\n`;\n\nconst LoadingContainer = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  width: 100vw;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 80px;\n  border-bottom: 2px dotted palevioletred;\n  @media (max-width: 800px) {\n    padding: 70px 10px 30px;\n  }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Body = styled.div`\n  width: 60%;\n  text-align: center;\n  @media (max-width: 1000px) {\n    width: 70%;\n  }\n  @media (max-width: 800px) {\n    width: 100%;\n  }\n`;\n\nconst LinksContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst Section = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 30px 0;\n`;\n\nconst Subsection = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  margin: 10px 0;\n`;\n\nconst SectionTitle = styled.h2`\n  color: palevioletred;\n  font-size: 1.5em;\n  margin: 20px auto 10px;\n`;\n\nconst SubsectionTitle = styled.h3`\n  color: palevioletred;\n  font-size: 1em;\n  margin: 10px;\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve data; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}